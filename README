This is an encoding of TLA into lambda calculus. We have types
 Tt for states, Ti for values (i.e. sets) and To for booleans.
 A TLA expression is of type (Tt > Tt) > Tt > Ti : it is a function
 which takes a next-state function and the current state t and returns
 the the value of the expression at t. In the following, we will use t_rho
 for the type of an expression and t_next for the type of the next state
 function.

A constant expression disregards both arguments and always returns
 the same value i.e. it is a term λ_ λ_ c. Likewise, a variable ignores the
 next argument, i.e. it is λ_ v. Priming an expression exp evaluates it
 on (next t) i.e. the corresponding term is λnext λt (exp next (next t)).
 Since only a constant operator can have arguments, an operator application
 evaluates the n arguments on next and t and applies those on the value level
 to c: the type of c is therefore Ti>...>Ti and the corresponding term is:
  λarg1...λargnλnext λt ((...(c (arg1 next t))... (argn next t)). The
 enabled operator introduces a new state and is similar to the HOL encoding
 of quantifiers. The difference is that it returns a TLA expression, no Boolean.
 This is caused by the untypedness of TLA. Enabled then corresponds to the term
  λ_ λt EN λs (exp ( λ_ s) t) where EN is a (global) constant of type Tt>Ti. The
 deviation from the standard time-line is visible in the next operator which
 projects to the newly introduce state s. Formally, this next function is no
 behaviour in the sense of TLA since it is not an infinite sequence of different
 states. But a level-correct TLA expression does neither allow double priming
 nor temporal reasoning (i.e. [] and \AA) within ENABLED. Therefore, the en_next
 will never be evaluated on two different arguments.

